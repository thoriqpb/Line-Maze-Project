// mode PWM 80
#define MOTOR_PIN1 5    // Motor A IN1 (Right)
#define MOTOR_PIN2 6    // Motor A IN2 (Right)
#define MOTOR_PIN3 11     // Motor B IN1 (Left)
#define MOTOR_PIN4 10     // Motor B IN2 (Left)

const int selectPins[] = {2, 3, 4}; 
const int analogPin = A0;           
const int thresholds[8] = {600, 300, 250, 150, 150, 300, 230, 230}; // Customize as needed
const int SPEED_BASE = 80;         

const float scaler = 17;       
const float Kp = 1.0;               
const float Ki = 0.0001;               
const float Kd = 1;              

float previousError = 0;            
float integral = 0;                 

unsigned long lastSharpTurnTime = 0;
const unsigned long sharpTurnCooldown = 30;  // milliseconds between turns

void setup() {
  Serial.begin(9600);
  pinMode(MOTOR_PIN1, OUTPUT); pinMode(MOTOR_PIN2, OUTPUT);
  pinMode(MOTOR_PIN3, OUTPUT); pinMode(MOTOR_PIN4, OUTPUT);
  for (int i = 0; i < 3; i++) pinMode(selectPins[i], OUTPUT);
}

void loop() {
  sharpTurn();  // Always check for sharp turns first!
  int activeBlackCount = 0;

  // Scan all sensors to check how many detect black (val < threshold)
  for (int i = 0; i < 8; i++) {
    selectChannel(i);
    int val = analogRead(analogPin);
    if (val < thresholds[i]) {
      activeBlackCount++;
    }
  }

  // Decide mode based on how many sensors detect black line
  if (activeBlackCount <= 2 && activeBlackCount > 0) {
    blackMode();  // Only 1 or 2 sensors see black → black line mode
  } else {
    whiteMode();  // More sensors or all see black → white line mode
  }
}


void blackMode() {
  int sensorValues[8];
  // float weights[8] = {-1.0, -1.0, -1.0, -0.4, 0.4, 1.0, 1.0, 1.0};  
  float weights[8] = {-2.3, -2.0, -1.0, -0.4, 0.4, 1.0, 2.0, 2.3};  
  float weightedSum = 0;
  int sum = 0;

  for (int i = 0; i < 8; i++) {
    selectChannel(i);
    int val = analogRead(analogPin);
    sensorValues[i] = val;
    
    int sensorActive = (val < thresholds[i]) ? 1000 : 0;
    weightedSum += sensorActive * weights[i];
    sum += sensorActive;
  }

  // Optional: Print sensor values for debugging
  for (int i = 0; i < 8; i++) {
    Serial.print(sensorValues[i]);
    Serial.print("\t");
  }

  float error = 0;
  if (sum != 0) {
    error = weightedSum / sum;
  }
  PID(weightedSum, sum);
}

void whiteMode() {
  int sensorValues[8];
  float weights[8] = {-2.3, -2.0, -1.0, -0.4, 0.4, 1.0, 2.0, 2.3};  
  float weightedSum = 0;
  int sum = 0;

  for (int i = 0; i < 8; i++) {
    selectChannel(i);
    int val = analogRead(analogPin);
    sensorValues[i] = val;

    // Inverted logic for white line on black background
    int sensorActive = (val > thresholds[i]) ? 1000 : 0;
    weightedSum += sensorActive * weights[i];
    sum += sensorActive;
  }

  // Optional: Print sensor values for debugging
  for (int i = 0; i < 8; i++) {
    Serial.print(sensorValues[i]);
    Serial.print("\t");
  }
  PID(weightedSum, sum);
}

void PID(float weightedSum, int sum) {
  float error = 0;
  if (sum != 0) {
    error = weightedSum / sum;
  }
  integral += error;
  float derivative = error - previousError;
  float output = Kp * error + Ki * integral + Kd * derivative;
  previousError = error;

  int adjustment = output * scaler;

  // 🔁 Smart slowdown when turning
  int turnSlowdown = abs(adjustment) / 3;
  int dynamicBaseSpeed = constrain(SPEED_BASE - turnSlowdown, 50, SPEED_BASE);

  int leftSpeed = constrain(dynamicBaseSpeed + adjustment, 0, 255);
  int rightSpeed = constrain(dynamicBaseSpeed - adjustment, 0, 255);

  setMotorSpeeds(leftSpeed, rightSpeed);

  // 🖨 Debug print
  Serial.print("PID: ");
  Serial.print(output);
  Serial.print("\tPWM Right: ");
  Serial.print(leftSpeed);
  Serial.print("\tPWM Left: ");
  Serial.println(rightSpeed);
}

bool frontSensorDetecting() {
  for (int i = 2; i <= 5; i++) {
    selectChannel(i);
    int val = analogRead(analogPin);
    if (val < thresholds[i]) {
      return true;  // Black line detected by any front sensor
    }
  }
  return false;
}

void sharpTurn() {
  unsigned long currentTime = millis();
  if (currentTime - lastSharpTurnTime < sharpTurnCooldown) return;

  // Read side sensors
  selectChannel(0); int left0 = analogRead(analogPin);
  selectChannel(1); int left1 = analogRead(analogPin);
  selectChannel(6); int right6 = analogRead(analogPin);
  selectChannel(7); int right7 = analogRead(analogPin);

  bool leftDetected = (left0 < thresholds[0] || left1 < thresholds[1]);
  bool rightDetected = (right6 < thresholds[6] || right7 < thresholds[7]);

  if (leftDetected && !rightDetected) {
    Serial.println("Sharp LEFT Turn");
    while (!frontSensorDetecting()) {
      setMotorSpeeds(0, 120);  // Turn left
    }
    lastSharpTurnTime = millis();  // Update cooldown after successful turn
  } 
  else if (rightDetected && !leftDetected) {
    Serial.println("Sharp RIGHT Turn");
    while (!frontSensorDetecting()) {
      setMotorSpeeds(120, 0);  // Turn right
    }
    lastSharpTurnTime = millis();
  }
}

void setMotorSpeeds(int leftSpeed, int rightSpeed) {
  analogWrite(MOTOR_PIN1, leftSpeed); analogWrite(MOTOR_PIN2, 0);
  analogWrite(MOTOR_PIN3, rightSpeed + 12); analogWrite(MOTOR_PIN4, 0);
}

void selectChannel(int channel) {
  for (int i = 0; i < 3; i++) digitalWrite(selectPins[i], (channel >> i) & 1);
}

